---
#- name: includes aws access secret
#  include_vars: secret.yml

- name: Create AWS VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: present
    tags:
      Name: Test VPC 
  register: vpc
  tags:
    - vpc

- name: Create Public Subnet in VPC
  ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ vpc_public_subnet_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    state:  present
    tags:
      Name: Public Subnet
  register: public_subnet
  tags:
    - vpc

- name: Create Private Subnet in VPC
  ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ vpc_private_subnet_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    state:  present
    tags:
      Name: Private Subnet
  register: private_subnet
  tags:
    - vpc

- name: Create Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    state: present
  register: igw
  tags:
    - vpc

- name: Create NAT Gateway
  ec2_vpc_nat_gateway:
    if_exist_do_not_create: yes
    subnet_id: "{{ public_subnet.subnet.id }}"
    region: "{{ aws_region }}"
    state: present
    wait: yes
  register: nat_gateway
  tags:
    - vpc

- name: Create Route Table for Public Subnet
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
    subnets:
      - "{{ public_subnet.subnet.id }}"
    tags:
      Name: Public Subnet Route Table
  tags:
    - vpc

- name: Create Route Table for Private Subnet
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ nat_gateway.nat_gateway_id }}"
    subnets:
      - "{{ private_subnet.subnet.id }}"
    tags:
      Name: Private Subnet Route Table
  tags:
    - vpc

- name: Create EC2 App Security Group
  ec2_group:
    name: app_sg
    description: App security group
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ vpc_cidr_block }}"
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: 8
        to_port:  -1
        cidr_ip: "{{ vpc_cidr_block }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: app_sg
  tags:
    - security_group

- name: Create EC2 ELB Security Group
  ec2_group:
    name: elb_sg
    description: ELB security group
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: 8
        to_port:  -1
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: elb_sg
  tags:
    - security_group

- name: Create EC2 Key Pair
  ec2_key:
    name: ansible 
    key_material: "{{ key }}"
    region: "{{ aws_region }}"
    state: present
  tags:
    - ec2

- name: Provision Virtual Machine 1 in public subnet
  ec2_instance:
    vpc_subnet_id: "{{ public_subnet.subnet.id }}"
    key_name: ansible
    security_group: elb_sg
    instance_type: "{{ instance_type }}"
    image_id: "{{ ami_id }}"
    region: "{{ aws_region }}"
    wait: true
    exact_count: 1
    state: present
    network:
     assign_public_ip: yes
    tags:
      Name: vm1 
  register: ec2_vm1

- name: Provision Virtual Machine 2 in public subnet
  ec2_instance:
    vpc_subnet_id: "{{ public_subnet.subnet.id }}"
    key_name: ansible
    security_group: elb_sg
    instance_type: "{{ instance_type }}"
    image_id: "{{ ami_id }}"
    region: "{{ aws_region }}"
    wait: true
    state: present
    exact_count: 1
    network:
     assign_public_ip: yes
    tags:
      Name: vm2 
  register: ec2_vm2

- name: Wait to completely provision instances
  pause:
    minutes: 1
- name: Refresh inventory
  meta: refresh_inventory


 

